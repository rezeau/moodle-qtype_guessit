{"version":3,"file":"wordlenavigation.min.js","sources":["../src/wordlenavigation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript code for the guessit question type.\n *\n * @copyright  2025 Joseph RÃ©zeau\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @module qtype_guessit/wordlenavigation\n *\n * This script controls the navigation in the Wordle game.\n */\n\n/**\n * Initialize the input gaps functionalities.\n */\nexport function init() {\n\n    document.querySelectorAll('[id^=\"question-\"]').forEach(question => {\n        const gaps = question.querySelectorAll('input[type=\"text\"][name*=\"p\"][class*=\"wordlegap\"]');\n        const correctGaps = document.querySelectorAll('input.correct');\n        const finished = (correctGaps.length == gaps.length);\n        if (finished) {\n            const wrappers = question.querySelectorAll('.input-wrapper');\n            wrappers.forEach((wrapper) => {\n                wrapper.setAttribute(\"style\", \"cursor: not-allowed;\");\n            });\n            correctGaps.forEach((input) => {\n                input.setAttribute(\"style\", \"pointer-events: none;\");\n            });\n        } else {\n            const checkButton = question.querySelector('button[type=\"submit\"].submit');\n            gaps.forEach((element, index) => {\n                // Empty the gap when clicked\n                element.addEventListener(\"click\", () => {\n                    element.value = ''; // Empty the gap on click\n                    // And remove all colour classes\n                    element.classList.remove('correct', 'partiallycorrect', 'incorrect');\n                });\n\n                // Listen for keydown to capture the key press and prevent more than one character\n                element.addEventListener(\"keydown\", (event) => {\n                    // Allow only letters (A-Z, a-z)\n                    if (!/^[a-zA-Z]$/.test(event.key)) {\n                        event.preventDefault();\n                    }\n                });\n\n                element.addEventListener(\"input\", () => {\n                    // Ensure only one character is allowed\n                    if (element.value.length > 1) {\n                        element.value = element.value.charAt(0); // Keep only the first character\n                    }\n                    // Convert lowercase to uppercase characters\n                    element.value = element.value.toUpperCase();\n                    // Automatically move to the next input if a letter is typed\n                    if (/^[a-zA-Z]$/.test(element.value)) {\n                        let nextIndex = index + 1;\n                        if (nextIndex < gaps.length) {\n                            let nextGap = gaps[nextIndex];\n                            // Clear the next gap if it's already filled\n                                if (nextGap.value.trim() !== '') {\n                                    nextGap.value = '';\n                                }\n                                // Move focus to the next input field\n                                nextGap.focus();\n                                // And remove all colour classes\n                                nextGap.classList.remove('correct', 'partiallycorrect', 'incorrect');\n                        } else if (checkButton) {\n                            // If it's the last gap, move focus to the \"Check\" button\n                            checkButton.focus();\n                        }\n                    }\n                });\n            });\n        }\n    });\n}"],"names":["document","querySelectorAll","forEach","question","gaps","correctGaps","length","wrapper","setAttribute","input","checkButton","querySelector","element","index","addEventListener","value","classList","remove","event","test","key","preventDefault","charAt","toUpperCase","nextIndex","nextGap","trim","focus"],"mappings":";;;;;;;AA+BO,WAEHA,SAASC,iBAAiB,qBAAqBC,SAAQC,WACnD,MAAMC,KAAOD,SAASF,iBAAiB,qDACjCI,YAAcL,SAASC,iBAAiB,iBAE9C,GADkBI,YAAYC,QAAUF,KAAKE,OAC/B,CACOH,SAASF,iBAAiB,kBAClCC,SAASK,UACdA,QAAQC,aAAa,QAAS,uBAAuB,IAEzDH,YAAYH,SAASO,QACjBA,MAAMD,aAAa,QAAS,wBAAwB,GAE5D,KAAO,CACH,MAAME,YAAcP,SAASQ,cAAc,gCAC3CP,KAAKF,SAAQ,CAACU,QAASC,SAEnBD,QAAQE,iBAAiB,SAAS,KAC9BF,QAAQG,MAAQ,GAEhBH,QAAQI,UAAUC,OAAO,UAAW,mBAAoB,YAAY,IAIxEL,QAAQE,iBAAiB,WAAYI,QAE5B,aAAaC,KAAKD,MAAME,MACzBF,MAAMG,gBACV,IAGJT,QAAQE,iBAAiB,SAAS,KAQ9B,GANIF,QAAQG,MAAMT,OAAS,IACvBM,QAAQG,MAAQH,QAAQG,MAAMO,OAAO,IAGzCV,QAAQG,MAAQH,QAAQG,MAAMQ,cAE1B,aAAaJ,KAAKP,QAAQG,OAAQ,CAClC,IAAIS,UAAYX,MAAQ,EACxB,GAAIW,UAAYpB,KAAKE,OAAQ,CACzB,IAAImB,QAAUrB,KAAKoB,WAEc,KAAzBC,QAAQV,MAAMW,SACdD,QAAQV,MAAQ,IAGpBU,QAAQE,QAERF,QAAQT,UAAUC,OAAO,UAAW,mBAAoB,YAC/D,MAAUP,aAEPA,YAAYiB,OAEpB,IACF,GAEV,IAER,CAAC"}
{"version":3,"file":"wordlenavigation.min.js","sources":["../src/wordlenavigation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript code for the guessit question type.\n *\n * @copyright  2025 Joseph RÃ©zeau\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @module qtype_guessit/wordlenavigation\n *\n * This script controls the navigation in the Wordle game.\n */\n\n/**\n * Initialize the input gaps functionalities.\n */\nexport function init() {\n    /* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\n\n    document.querySelectorAll('[id^=\"question-\"]').forEach(question => {\n        const gaps = question.querySelectorAll('input[type=\"text\"][name*=\"p\"][class*=\"wordlegap\"]');\n        const correctGaps = document.querySelectorAll('input.correct');\n        const finished = (correctGaps.length == gaps.length);\n        const checkButton = question.querySelector('button[type=\"submit\"].submit');\n        if (finished) {\n                correctGaps.forEach((input) => {\n                input.readOnly = true; // Make the input readonly.\n                input.style.cursor = \"not-allowed\"; // Set the cursor style.\n            });\n        } else {\n\n        gaps.forEach((element, index) => {\n            // Empty the gap when clicked\n            element.addEventListener(\"click\", () => {\n                element.value = ''; // Empty the gap on click\n                // And remove all colour classes\n                element.classList.remove('correct', 'partiallycorrect', 'incorrect');\n            });\n\n            // Listen for keydown to capture the key press and prevent more than one character\n            element.addEventListener(\"keydown\", (event) => {\n                // Allow only letters (A-Z, a-z)\n                if (!/^[a-zA-Z]$/.test(event.key)) {\n                    event.preventDefault();\n                }\n            });\n\n            element.addEventListener(\"keyup\", (event) => {\n                // Enable navigation with backtab to previous gap in order to modify it\n                if (event.key === 'Tab') {\n                    if (event.shiftKey) {\n                        // Prevent default behaviour of pressed keys\n                        event.preventDefault();\n                        let prevIndex = index - 1;\n                    } else {\n                        // Prevent default behaviour of pressed keys\n                        event.preventDefault();\n                        // Only move to the next gap if the current one is not empty\n                        if (element.value.trim() !== '') {\n                            let nextIndex = index + 1;\n                            // Skip over any gaps with class \"correct\"\n                            while (nextIndex < gaps.length && gaps[nextIndex].classList.contains('correct')) {\n                                nextIndex++;\n                            }\n                            if (nextIndex < gaps.length) {\n                                // Move to the next non-\"correct\" gap\n                                var nextGap = gaps[nextIndex];\n                                nextGap.focus();\n                                var length = nextGap.value.length;\n                                // Set caret at the end of the gap contents (value)\n                                nextGap.setSelectionRange(length, length);\n                                if (gaps[nextIndex].classList.contains('incorrect')) {\n                                    gaps[nextIndex].value = '';\n                                    gaps[nextIndex].classList.remove('incorrect');\n                                }\n                            } else if (checkButton) {\n                                // If it's the last gap in the question, move focus to the \"Check\" button\n                                checkButton.focus();\n                            }\n                        }\n                    }\n                }\n            });\n\n            element.addEventListener(\"input\", () => {\n                // Ensure only one character is allowed\n                if (element.value.length > 1) {\n                    element.value = element.value.charAt(0); // Keep only the first character\n                }\n                // Convert lowercase to uppercase characters\n                element.value = element.value.toUpperCase();\n                // Automatically move to the next input if a letter is typed\n                if (/^[a-zA-Z]$/.test(element.value)) {\n                    let nextIndex = index + 1;\n                    if (nextIndex < gaps.length) {\n                        let nextGap = gaps[nextIndex];\n                        // Clear the next gap if it's already filled\n                            if (nextGap.value.trim() !== '') {\n                                nextGap.value = '';\n                            }\n                            // Move focus to the next input field\n                            nextGap.focus();\n                            // And remove all colour classes\n                            nextGap.classList.remove('correct', 'partiallycorrect', 'incorrect');\n                    } else if (checkButton) {\n                        // If it's the last gap, move focus to the \"Check\" button\n                        checkButton.focus();\n                    }\n                }\n            });\n        });\n        }\n    });\n}"],"names":["document","querySelectorAll","forEach","question","gaps","correctGaps","finished","length","checkButton","querySelector","input","readOnly","style","cursor","element","index","addEventListener","value","classList","remove","event","test","key","preventDefault","shiftKey","trim","nextIndex","contains","nextGap","focus","setSelectionRange","charAt","toUpperCase"],"mappings":";;;;;;;AA+BO,WAIHA,SAASC,iBAAiB,qBAAqBC,SAAQC,WACnD,MAAMC,KAAOD,SAASF,iBAAiB,qDACjCI,YAAcL,SAASC,iBAAiB,iBACxCK,SAAYD,YAAYE,QAAUH,KAAKG,OACvCC,YAAcL,SAASM,cAAc,gCACvCH,SACID,YAAYH,SAASQ,QACrBA,MAAMC,UAAW,EACjBD,MAAME,MAAMC,OAAS,aAAa,IAI1CT,KAAKF,SAAQ,CAACY,QAASC,SAEnBD,QAAQE,iBAAiB,SAAS,KAC9BF,QAAQG,MAAQ,GAEhBH,QAAQI,UAAUC,OAAO,UAAW,mBAAoB,YAAY,IAIxEL,QAAQE,iBAAiB,WAAYI,QAE5B,aAAaC,KAAKD,MAAME,MACzBF,MAAMG,gBACV,IAGJT,QAAQE,iBAAiB,SAAUI,QAE/B,GAAkB,QAAdA,MAAME,IACN,GAAIF,MAAMI,SAAU,CAEhBJ,MAAMG,gBAEV,MAII,GAFAH,MAAMG,iBAEuB,KAAzBT,QAAQG,MAAMQ,OAAe,CAC7B,IAAIC,UAAYX,MAAQ,EAExB,KAAOW,UAAYtB,KAAKG,QAAUH,KAAKsB,WAAWR,UAAUS,SAAS,YACjED,YAEJ,GAAIA,UAAYtB,KAAKG,OAAQ,CAEzB,IAAIqB,QAAUxB,KAAKsB,WACnBE,QAAQC,QACR,IAAItB,OAASqB,QAAQX,MAAMV,OAE3BqB,QAAQE,kBAAkBvB,OAAQA,QAC9BH,KAAKsB,WAAWR,UAAUS,SAAS,eACnCvB,KAAKsB,WAAWT,MAAQ,GACxBb,KAAKsB,WAAWR,UAAUC,OAAO,aAExC,MAAUX,aAEPA,YAAYqB,OAEpB,CAER,IAGJf,QAAQE,iBAAiB,SAAS,KAQ9B,GANIF,QAAQG,MAAMV,OAAS,IACvBO,QAAQG,MAAQH,QAAQG,MAAMc,OAAO,IAGzCjB,QAAQG,MAAQH,QAAQG,MAAMe,cAE1B,aAAaX,KAAKP,QAAQG,OAAQ,CAClC,IAAIS,UAAYX,MAAQ,EACxB,GAAIW,UAAYtB,KAAKG,OAAQ,CACzB,IAAIqB,QAAUxB,KAAKsB,WAEc,KAAzBE,QAAQX,MAAMQ,SACdG,QAAQX,MAAQ,IAGpBW,QAAQC,QAERD,QAAQV,UAAUC,OAAO,UAAW,mBAAoB,YAC/D,MAAUX,aAEPA,YAAYqB,OAEpB,IACF,GAEN,GAER,CAAC"}